<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!-- 声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，
         这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->
	<modelVersion>4.0.0</modelVersion>

	<!-- 项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成，
         如com.mycompany.app生成的相对路径为：/com/mycompany/app -->
	<groupId>com.SpringBootTest</groupId>
	<!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID
         和groupID；在某个特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven
         为项目产生的构件包括：JARs，源码，二进制发布和WARs等。 -->
	<artifactId>SpringBootTest</artifactId>
	<!-- 项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->
	<version>0.0.1-SNAPSHOT</version>
	<!-- 项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 -->
	<packaging>war</packaging>

	<name>SpringBootTest</name>
	<description>Demo project for spring boot</description>

	<properties>
		<java.version>1.8</java.version>
		<mybatis.spring.version>1.2.4</mybatis.spring.version>
		<mapper.starter.version>2.0.4</mapper.starter.version>
		<pagehelper.starter.version>1.2.9</pagehelper.starter.version>
	</properties>
	<!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。-->
	<!--GroupId和ArtifactId被统称为“坐标”是为了保证项目唯一性而提出的，
	如果你要把你项目弄到maven本地仓库去，你想要找到你的项目就必须根据这两个id去查找。 -->
	<!-- 该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。
		要获取更多信息，请看项目依赖机制。 -->
	<dependencies>
		<!-- 导入spring boot的web支持 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
			<version>2.1.0.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<version>2.1.5.RELEASE</version>
		</dependency>
		<!--springBoot 单元测试-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-test</artifactId>
			<version>2.1.5.RELEASE</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>5.1.7.RELEASE</version>
			<scope>test</scope>
		</dependency>
		<!--shrio begin-->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.9</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-core</artifactId>
			<version>1.2.6</version>
		</dependency>
		<!--shiro end-->
		<!--lombok-->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.4</version>
			<scope>provided</scope>
		</dependency>
		<!--mybatis begin-->
		<!--整合springboot和mybatis-->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.2</version>
		</dependency>
		<!--使用mySql-->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>8.0.13</version>
			<scope>runtime</scope>
		</dependency>
		<!--mybatis end-->
		<!--添加druid数据库连接池-->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid-spring-boot-starter</artifactId>
			<version>1.1.10</version>
		</dependency>
		<!-- 添加fastjson对json串的处理 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>1.2.60</version>
		</dependency>
		<!-- springBoot与mybatis的整合 -->
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.3.2</version>
		</dependency>
		<dependency>
			<groupId>tk.mybatis</groupId>
			<artifactId>mapper-spring-boot-starter</artifactId>
			<version>${mapper.starter.version}</version>
		</dependency>
	</dependencies>
	<build>
		<!-- 打包项目名称 -->
		<finalName>${project.artifactId}</finalName>
		<!--使用的插件列表-->
		<plugins>
			<!-- plugin元素包含描述插件所需要的信息 -->
			<!-- 使用generator插件自动生成相关文件 -->
			<plugin>
				<groupId>org.mybatis.generator</groupId>
				<artifactId>mybatis-generator-maven-plugin</artifactId>
				<version>1.3.6</version>
				<!-- 扩展配置项 -->
				<configuration>
					<!-- MyBaits-generator的配置文件generatorConfig.xml的位置 -->
					<configurationFile>${pom.basedir}/src/main/resources/generator/generatorConfig.xml</configurationFile>
					<!-- 是否覆盖同名文件（只是针对XML文件,java文件生成类似*.java.1、*.java.2形式的文件）-->
					<overwrite>true</overwrite>
					<!-- 是否将生成过程输出至控制台 -->
					<verbose>true</verbose>
				</configuration>
				<!-- 项目引入插件所需要的额外依赖 -->
				<dependencies>
					<!-- mysql的连接依赖 -->
					<dependency>
						<groupId>mysql</groupId>
						<artifactId>mysql-connector-java</artifactId>
						<version>5.1.47</version>
					</dependency>
					<dependency>
						<groupId>tk.mybatis</groupId>
						<artifactId>mapper-generator</artifactId>
						<version>1.0.0</version>
					</dependency>
				</dependencies>
			</plugin>
			<!--编码和编译JDK版本-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>utf8</encoding>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>